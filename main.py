import re
import SpeechException
import buttons
import config
import db
import joblib
import numpy as np
import pandas as pd
import pymorphy2
import requests

from sklearn.preprocessing import LabelEncoder
from telegram import Bot, Update, InputMediaPhoto
from telegram.ext import CallbackContext, MessageHandler, Updater, Filters, CommandHandler
from telegram.utils.request import Request

subject = ['–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', '—Ä—É—Å—Å–∫–∏–π', '—Ö–∏–º–∏—è', '—Ñ–∏–∑–∏–∫–∞', '–≥–µ–æ–≥—Ä–∞—Ñ–∏—è', '–±–∏–æ–ª–æ–≥–∏—è', '—Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–∞',
           '—Ä–∏—Å–æ–≤–∞–Ω–∏–µ', '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ', '–∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∞', '–∏—Å—Ç–æ—Ä–∏—è', '—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ', '–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π',
           '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π', '–Ω–µ–º–µ—Ü–∫–∏–π', '–∏—Å–∫—É—Å—Å—Ç–≤–æ']

# –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
swg = joblib.load('Model/model.pkl')
vector = joblib.load('Model/model_vec.pkl')
encoder = LabelEncoder()
encoder.classes_ = joblib.load('Model/model_enc.joblib')

category = ''
b = False


# —É–¥–∞–ª—è–µ–º —Å–º–∞–π–ª–∏–∫–∏
def sub_emoji(text):
    emoji_pattern = re.compile("["
                               u"\U0001F600-\U0001F64F"  # emoticons
                               u"\U0001F300-\U0001F5FF"  # symbols & pictographs
                               u"\U0001F680-\U0001F6FF"  # transport & map symbols
                               u"\U0001F1E0-\U0001F1FF"  # flags (iOS)
                               "]+", flags=re.UNICODE)
    return (emoji_pattern.sub(r'', text)).strip()


# —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
def get_answer(text, update, context):
    df = pd.read_excel('Users.xlsx', sheet_name='–õ–∏—Å—Ç1')
    global category, b

    if text == buttons.BUTTON0_BACK:
        r = np.where(update.message.from_user.id == df['id'])[0][0]
        keyboard = df.loc[r, 'key']
        if keyboard == str(buttons.keyboard2()):
            new_keyboard = buttons.keyboard1()
        else:
            new_keyboard = buttons.keyboard2()

        df.loc[r, 'key'] = new_keyboard
        df.to_excel('Users.xlsx', sheet_name='–õ–∏—Å—Ç1', index=False)

        context.bot.send_message(
            chat_id=update.message.chat_id,
            text="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            reply_markup=new_keyboard,
        )
        return ''
    #
    elif text == buttons.BUTTON2_STUDENT:
        category = ''
        df.loc[np.where(update.message.from_user.id == df['id'])[0][0], 'key'] = str(buttons.keyboard2())
        df.to_excel('Users.xlsx', sheet_name='–õ–∏—Å—Ç1', index=False)
        context.bot.send_message(
            chat_id=update.message.chat_id,
            text="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            reply_markup=buttons.keyboard2(),
        )
        return ''
    #
    elif text == buttons.BUTTON_SPEC:
        category = ''
        df.loc[np.where(update.message.from_user.id == df['id'])[0][0], 'key'] = str(buttons.keyboard5())
        df.to_excel('Users.xlsx', sheet_name='–õ–∏—Å—Ç1', index=False)
        context.bot.send_message(
            chat_id=update.message.chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å?",
            reply_markup=buttons.keyboard5(),
        )
        return ''
    #
    elif category == '–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        category = ''
        return '–§–ì–ë–û–£ –í–û ¬´–í—è—Ç—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç¬ª (–í—è—Ç–ì–£) ‚Äì –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—è—Å—à–µ–µ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –≤ ' \
               '–≥–æ—Ä–æ–¥–µ –ö–∏—Ä–æ–≤–µ. –í—è—Ç–ì–£ –Ω–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç 9 –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏—Ö 75 –∫–∞—Ñ–µ–¥—Ä. –í–µ–¥–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –ø–æ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–π ' \
               '–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–π —Ñ–æ—Ä–º–∞–º, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –æ–±—É—á–∞–µ—Ç—Å—è –±–æ–ª–µ–µ 20 000 —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –±–æ–ª–µ–µ —á–µ–º 140 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º –∏ ' \
               '–ø—Ä–æ—Ñ–∏–ª—è–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏. –ß–∏—Å–ª–æ –Ω–∞—É—á–Ω–æ-–ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–∫–æ–ª–æ 1000 —á–µ–ª–æ–≤–µ–∫, ' \
               '–∏–∑ –Ω–∏—Ö 105 ‚Äî –¥–æ–∫—Ç–æ—Ä–æ–≤ –Ω–∞—É–∫ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä–æ–≤, 581 ‚Äî –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞—É–∫ –∏ –¥–æ—Ü–µ–Ω—Ç–æ–≤, —Ä–∞–±–æ—Ç–∞–µ—Ç –∞—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞ –∏ ' \
               '–¥–æ–∫—Ç–æ—Ä–∞–Ω—Ç—É—Ä–∞, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç 1 —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ –∑–∞—â–∏—Ç–µ –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–π. '
    #
    elif category == '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ':
        return '–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, ' + update.message.from_user.first_name + '! –Ø –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ –í—è—Ç–ì–£. ' \
                                                                       '–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å? '
    #
    elif category == '–ü—Ä–æ—â–∞–Ω–∏–µ':
        return '–í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ! –Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!'
    #
    elif category == '–û–±—â–µ–∂–∏—Ç–∏–µ':
        b = True
        if text == buttons.BUTTON_HOSTEL1:
            category = buttons.BUTTON_HOSTEL1
            df.loc[np.where(update.message.from_user.id == df['id'])[0][0], 'key'] = str(buttons.keyboard6())
            df.to_excel('Users.xlsx', sheet_name='–õ–∏—Å—Ç1', index=False)
            context.bot.send_message(
                chat_id=update.message.chat_id,
                text="–ö—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç—É–ø–∏—Ç—å?",
                reply_markup=buttons.keyboard6(),
            )
        elif text == buttons.BUTTON_HOSTEL2:
            category = buttons.BUTTON_HOSTEL2
            context.bot.send_message(
                chat_id=update.message.chat_id,
                text="–ö–∞–∫–æ–µ –æ–±—â–∞–∂–∏—Ç–∏–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            )
        elif text == buttons.BUTTON_HOSTEL3:
            category = buttons.BUTTON_HOSTEL3
            context.bot.send_message(
                chat_id=update.message.chat_id,
                text="–ö–∞–∫–æ–µ –æ–±—â–∞–∂–∏—Ç–∏–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            )
        else:
            text = "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –æ–±—â–µ–∂–∏—Ç–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?"
            df.loc[np.where(update.message.from_user.id == df['id'])[0][0], 'key'] = str(buttons.keyboard3())
            df.to_excel('Users.xlsx', sheet_name='–õ–∏—Å—Ç1', index=False)
            context.bot.send_message(
                chat_id=update.message.chat_id,
                text=text,
                reply_markup=buttons.keyboard3()
            )
        return ''
    #
    elif category == '–ö–æ—Ä–ø—É—Å–∞':
        b = True
        if text == buttons.BUTTON_HOUSING1:
            category = buttons.BUTTON_HOUSING1
            df.loc[np.where(update.message.from_user.id == df['id'])[0][0], 'key'] = str(buttons.keyboard6())
            df.to_excel('Users.xlsx', sheet_name='–õ–∏—Å—Ç1', index=False)
            context.bot.send_message(
                chat_id=update.message.chat_id,
                text="–ö—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç—É–ø–∏—Ç—å?",
                reply_markup=buttons.keyboard6(),
            )
        elif text == buttons.BUTTON_HOUSING2:
            category = buttons.BUTTON_HOUSING2
            context.bot.send_message(
                chat_id=update.message.chat_id,
                text="–ö–∞–∫–æ–π –∫–æ—Ä–ø—É—Å –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            )
        elif text == buttons.BUTTON_HOUSING3:
            category = buttons.BUTTON_HOUSING3
            context.bot.send_message(
                chat_id=update.message.chat_id,
                text="–ö–∞–∫–æ–π –∫–æ—Ä–ø—É—Å –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            )
        else:
            text = "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –∫–æ—Ä–ø—É—Å–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?"
            df.loc[np.where(update.message.from_user.id == df['id'])[0][0], 'key'] = str(buttons.keyboard4())
            df.to_excel('Users.xlsx', sheet_name='–õ–∏—Å—Ç1', index=False)
            context.bot.send_message(
                chat_id=update.message.chat_id,
                text=text,
                reply_markup=buttons.keyboard4()
            )
        return ''

    elif category == '–°—Ç–æ–∏–º–æ—Å—Ç—å':
        def get_data(l):
            global category, b
            res = db.connect(category, l)
            category = ''
            b = False
            answer = '–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è —Ä–∞–≤–Ω–∞ \n'
            for t in res:
                answer += str(t[0]) + '. –° —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ ' + str(t[1])
            return answer

        lists = intersection(Morph(text), pd.read_excel('Profession.xlsx', sheet_name='–õ–∏—Å—Ç1'))

        if b and not lists:
            return '–ê –≤–æ—Ç —ç—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è—Ç–Ω–æ...'
        elif not lists:
            b = True
            df.loc[np.where(update.message.from_user.id == df['id'])[0][0], 'key'] = str(buttons.keyboard7())
            df.to_excel('Users.xlsx', sheet_name='–õ–∏—Å—Ç1', index=False)
            context.bot.send_message(
                chat_id=update.message.chat_id,
                text="–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                reply_markup=buttons.keyboard7(),
            )
            return ''
        else:
            return get_data(lists)
    #
    elif category == '–î–æ–∫—É–º–µ–Ω—Ç—ã':
        category = ''
        return '–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç—ã –ø–æ–¥–∞—é—Ç –≤ –ø—Ä–∏–µ–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n' \
               '  üìå –î–æ–∫—É–º–µ–Ω—Ç –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏\n' \
               '  üìå –ü–∞—Å–ø–æ—Ä—Ç\n' \
               '  üìå 4 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ 3—Ö4\n' \
               '  üìå –ó–∞—è–≤–ª–µ–Ω–∏–µ –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –í—è—Ç–ì–£\n' \
               '  üìå –î–æ–∫—É–º–µ–Ω—Ç—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –ª—å–≥–æ—Ç—ã\n' \
               '  üìå –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ (—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å "–¢–∞–º–æ–∂–µ–Ω–Ω–æ–µ –¥–µ–ª–æ)"\n' \
               '  üìå –ü—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∞–º–∏–ª–∏–∏ ‚Äì –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n' \
               '  üìå –í–æ–µ–Ω–Ω—ã–π –±–∏–ª–µ—Ç –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω, –ø—Ä–æ—à–µ–¥—à–∏—Ö –≤–æ–µ–Ω–Ω—É—é —Å–ª—É–∂–±—É'
    #
    elif category == '–°—Ç–∏–ø–µ–Ω–¥–∏—è':
        category = ''
        return '–õ–∏—Ü–∞, –æ–±—É—á–∞—é—â–∏–µ—Å—è –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç—Å—è —Å—Ç–∏–ø–µ–Ω–¥–∏–µ–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–µ–π—Å—Ç–≤—É—é—â–∏–º ' \
               '–∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º. –í–∏–¥—ã —Å—Ç–∏–ø–µ–Ω–¥–∏–π –¥–ª—è –æ–±—É—á–∞—é—â–∏—Ö—Å—è –ø–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç:' \
               '\n  üí∑  –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è - 2820 —Ä—É–±–ª–µ–π' \
               '\n       üí≤ –æ—Ü–µ–Ω–∫–∏ ¬´4¬ª –∏ ¬´5¬ª ‚Äì 3525 —Ä—É–±–ª–µ–π' \
               '\n       üí≤ –æ—Ü–µ–Ω–∫–∏  ¬´5¬ª ‚Äì 4230 —Ä—É–±–ª–µ–π' \
               '\n  üí∑  –°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è - 4230 —Ä—É–±–ª–µ–π' \
               '\n  üí∑  –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è - 7000 —Ä—É–±–ª–µ–π' \
               '\n  üí∑  –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è - 7200 —Ä—É–±–ª–µ–π' \
               '\n\n–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ: ' \
               'https://www.vyatsu.ru/studentu-1/stipendial-noe-obespechenie-i-material-naya-podder.html' \
            #
    #
    elif category == '–ë–∞–ª–ª—ã':
        def get_data(l):
            global category, b
            res = db.connect(category, l)
            category = ''
            b = False
            answer = '–ü—Ä–æ—Ö–æ–¥–Ω—ã–µ –±–∞–ª–ª—ã:\n'
            i = 0
            for t in res:
                answer += str(l[i]) + ': ' + str(t[0]) + '\n'
                i += 1
            return answer

        lists = intersection(Morph(text), subject)
        if b and not lists:
            return '–ê –≤–æ—Ç —ç—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è—Ç–Ω–æ...'
        elif not lists:
            b = True
            return '–ö–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?'
        else:
            return get_data(lists)
    #
    elif category == '–ò—Ç–æ–≥–∏ –ø—Ä–∏–µ–º–∞':
        def get_data(l):
            global category, b
            res = db.connect(category, l)
            category = ''
            b = False
            answer = ''
            i = 0
            for t in l:
                answer += '–ò—Ç–æ–≥–∏ –ø—Ä–∏–µ–º–∞ –∑–∞ ' + str(t) + ' –≥–æ–¥: ' + str(res[0]) + '\n\n–°—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã: ' + str(res[1])
                i += 1
            return answer

        lists = intersection(Morph(text), ['2019', '2018', '2017', '2016'])
        if b and not lists:
            return '–ê –≤–æ—Ç —ç—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è—Ç–Ω–æ...'
        elif b:
            return get_data(lists)
        elif not lists:
            b = True
            return '–ò—Ç–æ–≥–∏ –ø—Ä–∏–µ–º–∞ –∫–∞–∫–æ–≥–æ –≥–æ–¥–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?'
        else:
            return get_data(lists)
    #
    elif category == '–§–∞–∫—É–ª—å—Ç–µ—Ç—ã':
        def get_data(l):
            global category, b
            res = db.connect(category, l)
            category = ''
            b = False
            answer = '–ù–∞ –¥–∞–Ω–Ω–æ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º:'
            i = 0
            for t in res:
                answer += '\n   ‚úÖ  ' + str(t[0])
                i += 1
            return answer

        lists = intersection(Morph(text), pd.read_excel('Faculties.xlsx', sheet_name='–õ–∏—Å—Ç1'))

        if b and not lists:
            return '–ê –≤–æ—Ç —ç—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è—Ç–Ω–æ...'
        elif b:
            return get_data(lists)
        elif not lists:
            b = True
            context.bot.send_message(
                chat_id=update.message.chat_id,
                text="–ö–∞–∫–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –∏–ª–∏ –∏–Ω—Å—Ç–∏—Ç—É—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                reply_markup=buttons.keyboard6(),
            )
            return ''
        else:
            return get_data(lists)
    #
    elif category == '–ö—É–¥–∞ –ø–æ—Å—Ç—É–ø–∏—Ç—å —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏':
        def get_data(l):
            global category, b
            res = db.connect(category, l)
            if not res:
                return '–í –í—è—Ç–ì–£ –Ω–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å —Ç–∞–∫–∏–º–∏ –ø—Ä–µ–¥–º–∞—Ç–∞–º–∏'
            category = ''
            b = False
            answer = '–° –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –º–æ–∂–Ω–æ –ø–æ—Å—Ç—É–ø–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞–ø—Ä–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:'
            i = 0
            for t in res:
                answer += '\n   ‚úÖ  ' + str(t[0])
                i += 1
            return answer

        lists = intersection(Morph(text), subject)
        if b and not lists:
            return '–ê –≤–æ—Ç —ç—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è—Ç–Ω–æ...'
        elif b:
            return get_data(lists)
        elif not lists:
            b = True
            return '–ö–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?'
        else:
            return get_data(lists)
    #
    elif category == '–î–æ—Å—É–≥':
        category = ''
        answer = '–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è –∂–∏–∑–Ω—å –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –≤ –í—è—Ç–ì–£ –Ω–∞—Å—ã—â–µ–Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —è—Ä–∫–∏—Ö –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π. –° ' \
                 '–ø–µ—Ä–≤–æ–≥–æ –∫—É—Ä—Å–∞ –∏ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ª–æ–≤–∏—è –¥–ª—è ' \
                 '—Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, —Ä–∞–∑–≤–∏—Ç–∏—è —Ç–∞–ª–∞–Ω—Ç–æ–≤ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞. '
        media = [
            InputMediaPhoto(open("image/1.jpg", 'rb')),
            InputMediaPhoto(open("image/2.jpg", 'rb')),
            InputMediaPhoto(open("image/3.jpg", 'rb')),
            InputMediaPhoto(open("image/4.jpg", 'rb'), answer)
        ]
        return media
    #
    elif category == '–ü—Ä–∏–µ–º–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è':
        context.bot.send_message(chat_id=update.message.chat_id, text="–ü—Ä–∏–µ–º–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è:\nüìû(8332) 74-29-29, "
                                                                      "64-89-89\nüåç610000, –≥.–ö–∏—Ä–æ–≤, —É–ª.–ú–æ—Å–∫–æ–≤—Å–∫–∞—è. –¥.36, "
                                                                      "–∞—É–¥.129\n‚úâprcom@vyatsu.ru\nüìÖ–ø–Ω-—á—Ç: 8:00-17:00, "
                                                                      "–ø—Ç: 08:00-16:00\n—Å–±, –≤—Å: –≤—ã—Ö–æ–¥–Ω–æ–π\n\n–ö—É—Ä—Å—ã –∏ "
                                                                      "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\nüìû(8332) 74-29-35, "
                                                                      "32-11-42\nüåç—É–ª.–ú–æ—Å–∫–æ–≤—Å–∫–∞—è. –¥.36, "
                                                                      "–∞—É–¥.243\n‚úâct@vyatsu.ru\nüìÖ–ø–Ω-—á—Ç: 8:00-17:00, "
                                                                      "–ø—Ç: 08:00-16:00")
        return ''
    #
    elif category == '–ü—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è':
        def get_data(l):
            global category, b
            res = db.connect(category, l)
            category = ''
            b = False
            answer = '–î–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n'
            i = 0
            for t in res:
                answer += " ‚úÖ " + str(t[0]) + '\n'
                i += 1
            return answer

        lists = intersection(Morph(text), pd.read_excel('Profession.xlsx', sheet_name='–õ–∏—Å—Ç1'))

        if b and not lists:
            return '–ê –≤–æ—Ç —ç—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è—Ç–Ω–æ...'
        elif b:
            return get_data(lists)
        elif not lists:
            b = True
            df.loc[np.where(update.message.from_user.id == df['id'])[0][0], 'key'] = str(buttons.keyboard7())
            df.to_excel('Users.xlsx', sheet_name='–õ–∏—Å—Ç1', index=False)
            context.bot.send_message(
                chat_id=update.message.chat_id,
                text="–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                reply_markup=buttons.keyboard7(),
            )
            return ''
        else:
            return get_data(lists)
    #
    elif category == '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç':
        def get_data(l):
            global category, b
            res = db.connect(category, l)
            category = ''
            b = False
            i = 0
            answer = ''
            for t in res:
                answer += '\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–ª—è –ø—Ä–∏—ë–º–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ ' + l[i] + ':'
                answer += '\n ‚úÖ –ë—é–¥–∂–µ—Ç–Ω—ã–µ –º–µ—Å—Ç–∞: ' + str(t[0]) + '\n ‚úÖ –¶–µ–ª–µ–≤–∞—è –∫–≤–æ—Ç–∞: ' + str(t[1]) + \
                          '\n ‚úÖ –û—Å–æ–±–∞—è –∫–≤–æ—Ç–∞: ' + str(t[2]) + '\n ‚úÖ –ú–µ—Å—Ç–∞ —Å –æ–ø–ª–∞—Ç–æ–π:' + str(t[3])
                i += 1
            return answer

        lists = intersection(Morph(text), pd.read_excel('Profession.xlsx', sheet_name='–õ–∏—Å—Ç1'))

        if b and not lists:
            return '–ê –≤–æ—Ç —ç—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è—Ç–Ω–æ...'
        elif not lists:
            b = True
            df.loc[np.where(update.message.from_user.id == df['id'])[0][0], 'key'] = str(buttons.keyboard7())
            df.to_excel('Users.xlsx', sheet_name='–õ–∏—Å—Ç1', index=False)
            context.bot.send_message(
                chat_id=update.message.chat_id,
                text="–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                reply_markup=buttons.keyboard7(),
            )
            return ''
        else:
            return get_data(lists)

    # –ö—Ç–æ –∂–∏–≤–µ—Ç/—É—á–∏—Ç—Å—è –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏/–∫–æ—Ä–ø—É—Å–µ
    elif category in [buttons.BUTTON_HOSTEL2, buttons.BUTTON_HOUSING2]:
        def get_data(l):
            global category, b
            res = db.connect(category, l)
            answer = ''
            for r in res:
                if category == buttons.BUTTON_HOSTEL2:
                    answer += '–í –æ–±—â–µ–∂–∏—Ç–∏–∏ ' + str(r[0]) + ' –ø—Ä–æ–∂–∏–≤–∞—é—Ç —Å—Ç—É–¥–µ–Ω—Ç—ã —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –∏ –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤: '
                else:
                    answer += '–í ' + str(r[0]) + ' –∫–æ—Ä–ø—É—Å–µ —É—á–∞—Ç—Å—è —Å—Ç—É–¥–µ–Ω—Ç—ã —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –∏ –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤: '
                for j in r[1]:
                    answer += '\n   ‚úÖ ' + str(j)
                answer += '\n\n'
            category = ''
            b = False
            return answer

        if category == buttons.BUTTON_HOSTEL2:
            lists = intersection(Morph(text), [str(i) for i in range(1, 9)])
        else:
            r = [str(i) for i in range(1, 24)]
            lists = intersection(Morph(text), r)
        if b and not lists:
            return '–ê –≤–æ—Ç —ç—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è—Ç–Ω–æ...'
        else:
            return get_data(lists)

    # –í –∫–∞–∫–æ–º –æ–±—â–µ–∂–∏—Ç–∏–∏/–∫–æ—Ä–ø—É—Å–µ —è –±—É–¥—É –∂–∏—Ç—å/—É—á–∏—Ç—Å—è
    elif category in [buttons.BUTTON_HOSTEL1, buttons.BUTTON_HOUSING1]:
        def get_data(l):
            global category, b
            res = db.connect(category, l)
            if category == buttons.BUTTON_HOSTEL1:
                answer = '–í—ã –±—É–¥–∏—Ç–µ –∂–∏—Ç—å –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±—â–µ–∂–∏—Ç–∏–π: '
                for r in res:
                    answer += '\n   ‚úÖ  –û–±—â–µ–∂–∏—Ç–∏–µ ' + str(r[0]) + ' - –∞–¥—Ä–µ—Å: ' + str(r[1])
            else:
                answer = '–í–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ—Ä–ø—É—Å ‚Ññ' + str(res[0][0]) + ' –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: ' + str(res[0][1])
            category = ''
            b = False
            return answer

        lists = intersection(Morph(text), pd.read_excel('Faculties.xlsx', sheet_name='–õ–∏—Å—Ç1'))

        if b and not lists:
            return '–ê –≤–æ—Ç —ç—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è—Ç–Ω–æ...'
        else:
            return get_data(lists)

    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—â–µ–∂–∏—Ç–∏—è—Ö/–∫–æ—Ä–ø—É—Å–∞—Ö
    elif category in [buttons.BUTTON_HOSTEL3, buttons.BUTTON_HOUSING3]:
        def get_data(l):
            global category, b
            res = db.connect(category, l)
            category = ''
            b = False
            answer = ''
            if category == buttons.BUTTON_HOSTEL1:
                for r in res:
                    answer += '‚úÖ  –û–±—â–µ–∂–∏—Ç–∏–µ ' + str(r[0][0]) + \
                              '\n - –ê–¥—Ä–µ—Å: ' + str(r[0][1]) + \
                              '\n - –¢–µ–ª–µ—Ñ–æ–Ω: ' + str(r[0][2]) + '\n\n'
            else:
                for r in res:
                    answer += '‚úÖ  –ö–æ—Ä–ø—É—Å ' + str(r[0][0]) + \
                              '\n - –ê–¥—Ä–µ—Å: ' + str(r[0][1]) + \
                              '\n - –¢–µ–ª–µ—Ñ–æ–Ω: ' + str(r[0][2]) + '\n\n'
            return answer

        lists = intersection(Morph(text), ['1', '2', '3', '4', '5', '6', '7', '8'])
        if b and not lists:
            return '–ê –≤–æ—Ç —ç—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è—Ç–Ω–æ...'
        else:
            return get_data(lists)


# –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤–ø–µ—Ä–≤—ã–µ
def do_start(update: Update, context: CallbackContext):
    id = update.message.from_user.id
    keyboard = buttons.keyboard1()

    df = pd.read_excel('Users.xlsx', sheet_name='–õ–∏—Å—Ç1')
    mask = np.where(id == df['id'])
    if len(mask[0]) == 0:
        count = len(df['id'])
        df.loc[count, 'id'] = id
        df.loc[count, 'key'] = keyboard
        df.to_excel('Users.xlsx', sheet_name='–õ–∏—Å—Ç1', index=False)

    context.bot.send_message(
        chat_id=update.message.chat_id,
        text="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ –í—è—Ç–ì–£ –≤ –Ω–∞—à–µ–º —á–∞—Ç-–±–æ—Ç–µ! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ "
             "–≤–æ–ø—Ä–æ—Å—ã. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ –ø–æ–ª–µ–∑–Ω–æ–º –¥–ª—è –≤–∞—Å —Ä–µ—Å—É—Ä—Å–µ: "
             "https://www.vyatsu.ru/abiturientu.html",
        reply_markup=buttons.keyboard1(),
    )


#  –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ –º–æ–¥–µ–ª—å
def add_excel(text, name_file):
    global category
    df = pd.read_excel(name_file, sheet_name='–õ–∏—Å—Ç1')
    mask = np.where(text == df)
    if len(mask[0]) == 0:
        try:
            nan_indexes = np.where(pd.isnull(df[category]))
            df.loc[nan_indexes[0][0], category] = text
        except:
            count = len(df[category])
            df.loc[count, category] = text
        finally:
            df.to_excel(name_file, sheet_name='–õ–∏—Å—Ç1', index=False)


#  —É–¥–∞–ª–µ–Ω–∏–µ –∑–Ω–∞–∫–æ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
def sub_symbol(text):
    text = re.sub(r'[()"<>.,!?;]', "", text)
    text = text.lower()
    return text


#  –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
def correct(text):
    r = requests.post("https://speller.yandex.net/services/spellservice.json/checkText", data={'text': text})
    data = r.json()
    changes = {change['word']: change['s'][0] for change in data}
    for word, suggestion in changes.items():
        text = text.replace(word, suggestion)
    return text


# –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è —Å–ª–æ–≤ –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ
def Morph(text):
    text = sub_symbol(text)
    text = correct(text)
    text = sub_emoji(text)
    morph = pymorphy2.MorphAnalyzer()
    new_text = ''
    for word in text.split(' '):
        new_text += morph.parse(word)[0].normal_form + " "
    print(new_text[0:-1])
    return new_text[0:-1]


# –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
def intersection(text, array):
    if type(array) == list:
        text = text.split(' ')
    else:
        array = array[2]
    rew = [i for i in array if i in text]
    return rew


# –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
def get_category(text):
    global category
    text = Morph(text)
    df = pd.read_excel('model.xlsx', sheet_name='–õ–∏—Å—Ç1')
    mask = np.where(text == df)
    if len(mask[0]) == 0:
        t = vector.transform([text])
        rt = swg.predict_proba(t)
        if rt.max() > 0.3:
            Y = swg.predict(t)
            category = encoder.inverse_transform(Y)[0]
            add_excel(text, 'model.xlsx')
        else:
            category = 'NaN'
    else:
        category = list(df)[mask[1][0]]


def Answer(text, update, context):
    if not b and text != buttons.BUTTON0_BACK:
        get_category(text)

    if category == 'NaN':
        r = '–ü–æ–ø—Ä–æ–±—É–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–≤–∞, –≤—ã—Ä–∞–∑–∏—Ç—å —Å–≤–æ—é –º—ã—Å–ª—å –ø–æ-–¥—Ä—É–≥–æ–º—É.'
        context.bot.send_message(
            chat_id=update.message.chat_id,
            text=r,
        )
        return
    else:
        r = get_answer(text, update, context)

    if r != '':
        if isinstance(r, list):
            context.bot.send_media_group(update.message.chat_id, r)
        else:
            context.bot.send_message(
                chat_id=update.message.chat_id,
                text=r,
            )


#  –ø–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç
def do_echo(update: Update, context: CallbackContext):
    global category
    text = update.message.text
    print(str(update.message.from_user.first_name) + ": " + str(text))

    Answer(text, update, context)


#  –ø–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
def do_echo_voice(update: Update, context: CallbackContext):
    file_id = update.message.voice.file_id
    file = context.bot.get_file(file_id)
    file.download('voice.ogg')

    text = SpeechException.get_text(update.message.voice.file_id)
    Answer(text, update, context)


# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
def main():
    request = Request(con_pool_size=8)

    bot = Bot(
        token=config.TG_TOKEN,
        request=request,
        base_url=config.TG_API_URL
    )

    updater = Updater(
        bot=bot,
        use_context=True
    )

    print("..Start..\n")

    start_handler = CommandHandler("start", do_start)
    text_handler = MessageHandler(Filters.text, do_echo)
    mp3_handler = MessageHandler(Filters.voice, do_echo_voice)

    updater.dispatcher.add_handler(start_handler)
    updater.dispatcher.add_handler(text_handler)
    updater.dispatcher.add_handler(mp3_handler)

    updater.start_polling()  # –Ω–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    updater.idle()  # –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π


if __name__ == '__main__':
    main()
